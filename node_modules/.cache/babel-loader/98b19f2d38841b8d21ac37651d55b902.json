{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Amirhossein Razavi\\\\Desktop\\\\react-course\\\\react-course\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport repository from '../../../repository';\nconst postRepo = repository.postRepo;\nexport default (store => ({\n  selectedPost: store.getState().selectedPost,\n  mode: store.getState().mode || '',\n  posts: store.getState().posts,\n  onChange: (prop, value) => {\n    store.setState(state => ({\n      selectedPost: _objectSpread({}, state.selectedPost, {\n        [prop]: value\n      })\n    }));\n  },\n  onSave: post => {\n    const posts = store.getState().posts.posts;\n    let newPosts;\n\n    if (post.userId === 'newUser') {\n      newPosts = [...posts, _objectSpread({}, post, {\n        userId: ''\n      })];\n    } else {\n      newPosts = posts.map(p => p.id === post.id ? _objectSpread({}, post) : p);\n    }\n\n    store.setState(() => ({\n      mode: '',\n      posts: newPosts,\n      selectedPost: {}\n    }), () => {\n      postRepo.savePosts(newPosts);\n    });\n  },\n  onCancel: () => {\n    store.setState({\n      selectedPost: {},\n      mode: ''\n    });\n  }\n}));","map":{"version":3,"sources":["C:\\Users\\Amirhossein Razavi\\Desktop\\react-course\\react-course\\src\\components\\Post\\mapping.js"],"names":["repository","postRepo","store","selectedPost","getState","mode","posts","onChange","prop","value","setState","state","onSave","post","newPosts","userId","map","p","id","savePosts","onCancel"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,qBAAvB;MAEQC,Q,GAAaD,U,CAAbC,Q;AAER,gBAAgBC,KAAD,KAAY;AACzBC,EAAAA,YAAY,EAAED,KAAK,CAACE,QAAN,GAAiBD,YADN;AAEzBE,EAAAA,IAAI,EAAEH,KAAK,CAACE,QAAN,GAAiBC,IAAjB,IAAyB,EAFN;AAGzBC,EAAAA,KAAK,EAAEJ,KAAK,CAACE,QAAN,GAAiBE,KAHC;AAKzBC,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzBP,IAAAA,KAAK,CAACQ,QAAN,CAAgBC,KAAD,KAAY;AACzBR,MAAAA,YAAY,oBACPQ,KAAK,CAACR,YADC;AAEV,SAACK,IAAD,GAAQC;AAFE;AADa,KAAZ,CAAf;AAMD,GAZwB;AAczBG,EAAAA,MAAM,EAAGC,IAAD,IAAU;AAAA,UACRP,KADQ,GACEJ,KAAK,CAACE,QAAN,GAAiBE,KADnB,CACRA,KADQ;AAEhB,QAAIQ,QAAJ;;AAEA,QAAID,IAAI,CAACE,MAAL,KAAgB,SAApB,EAA+B;AAC7BD,MAAAA,QAAQ,GAAG,CAAC,GAAGR,KAAJ,oBAAgBO,IAAhB;AAAsBE,QAAAA,MAAM,EAAE;AAA9B,SAAX;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,GAAGR,KAAK,CAACU,GAAN,CAAWC,CAAD,IACnBA,CAAC,CAACC,EAAF,KAASL,IAAI,CAACK,EAAd,qBACSL,IADT,IAEII,CAHK,CAAX;AAKD;;AAEDf,IAAAA,KAAK,CAACQ,QAAN,CAAe,OAAO;AACpBL,MAAAA,IAAI,EAAE,EADc;AAEpBC,MAAAA,KAAK,EAAEQ,QAFa;AAGpBX,MAAAA,YAAY,EAAE;AAHM,KAAP,CAAf,EAII,MAAM;AACRF,MAAAA,QAAQ,CAACkB,SAAT,CAAmBL,QAAnB;AACD,KAND;AAOD,GAnCwB;AAqCzBM,EAAAA,QAAQ,EAAE,MAAM;AACdlB,IAAAA,KAAK,CAACQ,QAAN,CAAe;AACbP,MAAAA,YAAY,EAAE,EADD;AAEbE,MAAAA,IAAI,EAAE;AAFO,KAAf;AAID;AA1CwB,CAAZ,CAAf","sourcesContent":["import repository from '../../../repository';\n\nconst { postRepo } = repository;\n\nexport default (store) => ({\n  selectedPost: store.getState().selectedPost,\n  mode: store.getState().mode || '',\n  posts: store.getState().posts,\n\n  onChange: (prop, value) => {\n    store.setState((state) => ({\n      selectedPost: {\n        ...state.selectedPost,\n        [prop]: value,\n      },\n    }));\n  },\n\n  onSave: (post) => {\n    const { posts } = store.getState().posts;\n    let newPosts;\n\n    if (post.userId === 'newUser') {\n      newPosts = [...posts, { ...post, userId: '' }];\n    } else {\n      newPosts = posts.map((p) => (\n        p.id === post.id\n          ? { ...post }\n          : p\n      ));\n    }\n\n    store.setState(() => ({\n      mode: '',\n      posts: newPosts,\n      selectedPost: {},\n    }), () => {\n      postRepo.savePosts(newPosts);\n    });\n  },\n\n  onCancel: () => {\n    store.setState({\n      selectedPost: {},\n      mode: '',\n    });\n  },\n\n});\n"]},"metadata":{},"sourceType":"module"}